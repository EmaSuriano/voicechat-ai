name: Auto Release

on:
  push:
    branches: [main, master]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'docs/**'
      - '.github/**'
      - '*.md'

jobs:
  auto-tag-and-release:
    name: Auto Tag and Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip release]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Get latest tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Check if version changed
        id: version_check
        run: |
          CURRENT_VERSION="v${{ steps.current_version.outputs.version }}"
          LATEST_TAG="${{ steps.latest_tag.outputs.tag }}"

          if [ "$CURRENT_VERSION" != "$LATEST_TAG" ]; then
            echo "Version changed from $LATEST_TAG to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $CURRENT_VERSION"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create new tag
        if: steps.version_check.outputs.changed == 'true'
        run: |
          NEW_VERSION="${{ steps.version_check.outputs.new_version }}"
          echo "Creating tag: $NEW_VERSION"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"

      - name: Trigger release workflow
        if: steps.version_check.outputs.changed == 'true'
        run: |
          echo "ðŸš€ New tag created: ${{ steps.version_check.outputs.new_version }}"
          echo "Release workflows will be triggered automatically by the tag push."
