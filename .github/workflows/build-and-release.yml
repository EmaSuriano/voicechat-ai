name: Build and Release VoiceChat AI

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allow manual trigger
    inputs:
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: arm64
          - os: windows-latest
            platform: win32
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build application
        run: npm run make
        env:
          CI: true

      - name: List build artifacts
        run: |
          echo "Build artifacts:"
          ls -la out/
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: voicechat-ai-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            out/make/**/*
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Extract version from tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="manual-$(date +%Y%m%d-%H%M%S)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: VoiceChat AI ${{ steps.version.outputs.version }}
          body: |
            ## VoiceChat AI ${{ steps.version.outputs.version }}

            ### üöÄ New Release

            **Download the appropriate version for your platform:**

            - **macOS**: `.dmg` file for Intel Macs, `.dmg` file for Apple Silicon
            - **Windows**: `.exe` installer
            - **Linux**: `.deb` package for Debian/Ubuntu, `.rpm` for RedHat/Fedora

            ### ‚ú® Features
            - ü§ñ AI-powered chat with Ollama integration
            - üé§ Voice-to-text using Whisper AI
            - üìù Full markdown support with code highlighting
            - ‚ö° Real-time streaming responses
            - üé® Modern, responsive interface

            ### üìã Requirements
            - [Ollama](https://ollama.ai/) must be installed and running
            - At least one Ollama model downloaded (e.g., `ollama pull llama2`)

            ### üêõ Issues?
            Report bugs and feature requests on [GitHub Issues](https://github.com/${{ github.repository }}/issues).
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

      - name: Upload Release Assets
        run: |
          # Find and upload all built packages
          find ./artifacts -name "*.dmg" -o -name "*.exe" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" -o -name "*.tar.gz" | while read file; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."
              curl \
                -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${{ steps.create_release.outputs.upload_url }}?name=$filename"
            fi
          done
        shell: bash

  cleanup:
    name: Cleanup
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Clean up artifacts
        uses: actions/github-script@v7
        with:
          script: |
            // Clean up old artifacts to save storage
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.includes('voicechat-ai-')) {
                console.log(`Keeping artifact: ${artifact.name}`);
              }
            }
